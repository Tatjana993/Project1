var mysql = require('./mysqlConnection');

exports.getOffersWhereIdrestaurant = function(id, cb){

    mysql.getConnection(function(err, connection){
      if(err) throw err;
      else{
        let sql = 'SELECT * from offer WHERE idrestaurant=?'
        let values = [id];
        connection.query(sql, values, function(err, rows){
          if(err) cb(err);
          else{
          connection.release();
          cb(JSON.stringify(rows));
          }
        })
      }
    })
  
  }

  exports.getOffersWhereId = function(id, cb){
    mysql.getConnection(function(err, connection){
      if(err) cb(err);
      else{
          let sql = 'SELECT * FROM offer WHERE idoffer=?';
          let values = [id];
          connection.query(sql, values, function(err, result){
              if(err) cb(err);
              else{
                  //console.log(id);
                  connection.release();
                  cb(JSON.stringify(result));
              }
          })
      }
  })
  }

  exports.createOrder = function(order, address, cb){
    mysql.getConnection(function(err, connection){
      if(err) cb(err);
      else{
        let sql = "INSERT INTO project1.order (address) VALUES ?";
       // console.log(address);
        let addresss = String(address);
        let values = [[addresss]];
        connection.query(sql, [values], function(err, rows){
          if(err) cb(err);
          else{
            let insertId = rows.insertId;
            connection.release();
            for (let i = 0; i < order.length; i++){
             // console.log('iiii ' + i);
             // console.log(rows);
              
              let idOffer = Number(order[i].idoffer);
              let idUser = Number(order[i].iduser);
              let amount = Number(order[i].amount);
              let idInserted = Number(insertId);
              let sidedishes = order[i].sidedishes;
              let instruction = order[i].instruction;
              let datetime = new Date();
              console.log(sidedishes);
              if(instruction === null) {
                instruction = 'null';
              }
              sql = "INSERT INTO selectedoffer (idOffer, idUser, amount, idOrder, datetime, instruction) VALUES ?";
              values = [[idOffer, idUser, amount, idInserted, datetime, instruction]];
              createSelectedOffer(sql, values, sidedishes, function(data){
                
                  // cb(data);
              })
            }
            cb('ok')
          
          }
        }) 
      }
    })
  }

  createSelectedSideDishes = function(insertedIdSelectedOffer, valuesSidedish, cb) {
    let sqlSidedis = "INSERT INTO selectedsidedishes (idselectedoffer, idsidedish) VALUES ?"
    mysql.getConnection(function(err, connection){
      connection.query(sqlSidedis, [valuesSidedish], function(err, rows){
        if(err) cb(err);
        else {
         // console.log('yyyy ' + rows.insertId);
          connection.release();
          cb(rows);
        }
      })
    })

  }

  createSelectedOffer = function(sql, values, sidedishes, cb) {
   // console.log('hhhhhhhhhhhhh');
   // console.log(sql);
   // console.log(values);
    mysql.getConnection(function(err, connection){
      connection.query(sql, [values], function(err, rows){
        if (err) cb(err);
        else {
         // console.log(rows);
          connection.release();
          let insertedIdSelectedOffer = rows.insertId;
         
          for (let y = 0; y < sidedishes.length; y++){
            let valuesSidedish = [[insertedIdSelectedOffer, Number(sidedishes[y])]];
           // console.log('yyyy ' + y);
           createSelectedSideDishes(insertedIdSelectedOffer, valuesSidedish, function(data){

           })
          } 
          cb('ok');
        }
      })
    })
  }

  exports.getSideDishes = function(cb) {
    console.log('/////************');
    mysql.getConnection(function(err, connection) {
      if (err) cb(err);
      else{
        let sql = 'SELECT * FROM sidedish';
        connection.query(sql, function(err, rows) {
          if(err) cb(err);
          else{
            connection.release();
            console.log('//////////')
            console.log(rows);
            cb(JSON.stringify(rows));
          }
        })
      }
    })
  }

  exports.getOffersWhereUserIdOrderId = function(id, cb){
    let sql1 = "SELECT distinct project1.selectedoffer.idOrder FROM project1.selectedoffer where idUser=?";
    let values = [id]; 
    mysql.getConnection(function(err, connection){
      if(err) cb({status: 'database error'});
      else{
        connection.query(sql1, values, function(err, rows){
          if(err) cb({status: 'database error'});
          else {
            let arrayIdOrder = [Number];
            connection.release();
            for(let k=0; k<rows.length; k++){
              arrayIdOrder[k] = Number(rows[k].idOrder);
            }
            cb(arrayIdOrder);
          }
          })
      }
    })

  }

  exports.getOffersWhereUserId = function(id, cb){
    let sql = "SELECT * FROM selectedofferjoinoffer WHERE idUser=?";
    let values = [id];
    //console.log(values);
    mysql.getConnection(function(err, connection){
      connection.query(sql, values, function(err, rows){
        if(err) cb({status: 'database error'});
        else{
          connection.release();
          console.log(rows);
          cb(rows);
        }
      })
    })
  }

  pomocna = function(id, cb){
    mysql.getConnection(function(err, connection){
      if(err) cb({status: 'database error'});
      else {
        let sql1 = "SELECT distinct project1.selectedoffer.idOrder FROM project1.selectedoffer where idUser=?";
        let values = [id]; 
        connection.query(sql1, values, function(err, rows){
          if(err) cb({status: 'database error'});
          else {
            let arrayIdOrder = [Number];
            connection.release();
            for(let k=0; k<rows.length; k++){
              arrayIdOrder[k] = Number(rows[k].idOrder);
            }
            cb(arrayIdOrder);
           // console.log(arrayIdOrder);
         /*   let sql = "SELECT * FROM selectedofferjoinoffer WHERE idUser=? AND idOrder=?";
            let arrayOrders = [];
            let y = 0;
            for(let i=0; i<arrayIdOrder.length; i++){
              getOffersWhereUserIdOfferId(id, arrayIdOrder[i], function(data){
                createJsonList(data, function(data2){
                  arrayOrders[i] = data2;
                  console.log(arrayOrders);
                })
                
               // console.log(arrayOrders[i]);
              })
              values = [id, arrayIdOrder[i]];
              mysql.getConnection(function(err, connection){
                connection.query(sql, values, function(err, rows){
                  if(err) cb({status: 'database error'});
                  else {
                    console.log(values);
                    connection.release();
                    //console.log(rows);
                    arrayOrders[i] = rows;
                    console.log(arrayOrders[i]);
                  }
                })
              })  
              
            } */
           
          }
        })
        
      }
    })
  }

  getOffersWhereUserIdOfferId = function(id, cb){
    let sql1 = "SELECT distinct project1.selectedoffer.idOrder FROM project1.selectedoffer where idUser=?";
    let values = [id]; 
    mysql.getConnection(function(err, connection){
      if(err) cb({status: 'database error'});
      else{
        connection.query(sql1, values, function(err, rows){
          if(err) cb({status: 'database error'});
          else {
            let arrayIdOrder = [Number];
            connection.release();
            for(let k=0; k<rows.length; k++){
              arrayIdOrder[k] = Number(rows[k].idOrder);
            }
            cb(arrayIdOrder);
          }
          })
      }
    })

  }

  exports.novaFunkcija = function(id, cb){
    let sql1 = "SELECT distinct project1.selectedoffer.idOrder FROM project1.selectedoffer where idUser=?";
    let values = [id]; 
    mysql.getConnection(function(err, connection){
      if(err) cb(err);
      else {
        connection.query(sql1, values, function(err, rows){
          if(err) cb(err);
          else {
            let ordersid = new Array();
            let pom = new Array();
            let selectedoffers = new Array();
            for(let k=0; k<rows.length; k++){
              ordersid[k] = Number(rows[k].idOrder);
              // console.log('for');
            }
           // console.log(ordersid);
            
            let brojac = 0;
            let sql2 = "SELECT so.idSelectedoffer, so.idOffer, so.idUser, so.amount, so.idOrder, so.datetime, so.instruction, o.idoffer, o.idrestaurant, o.name, o.description, o.price, o.image, r.name AS restaurantname FROM project1.selectedoffer so inner join offer o on so.idOffer=o.idOffer inner join restaurant r on o.idrestaurant=r.idrestaurant where idUser=?";
            //  for(let i=0; i<ordersid.length; i++){
                let values2 = [id];
                connection.query(sql2, values2, function(err, rows){
                  if(err) cb(err);
                  else {
                    let rows1 = rows;
                    let sql3 = "SELECT so.idSelectedoffer, sd.name FROM project1.selectedoffer so inner join offer o on so.idOffer=o.idOffer left join selectedsidedishes ssd on ssd.idselectedoffer=so.idSelectedoffer inner join sidedish sd on ssd.idsidedish=sd.idsidedish  where idUser=?";
                     connection.query(sql3, values2, function(err, rows){
                      if(err) cb(err);
                      else{
                      for(let j=0; j<ordersid.length; j++){
                        brojac = 0;
                        for(let i=0; i<rows1.length; i++){
                          if(ordersid[j] === rows1[i].idOrder){
                            pom[brojac] = rows1[i];
                           
                            let dodaci = new Array();
                            let brojac2 = 0;
                           // console.log(rows);
                            for(let m=0; m<rows.length; m++){
                              if(rows[m].idSelectedoffer === rows1[i].idSelectedoffer){
                                dodaci[brojac2] = rows[m].name;
                                brojac2 = brojac2+1;
                              }
                            }
                            pom[brojac].sidedishes = dodaci;
                            brojac = brojac+1;
                          }
                         
                        }
                        selectedoffers[j] = pom;
                        pom = new Array();
                      }
                      cb(selectedoffers);
                    }
                    })
                   
                  //  console.log(selectedoffers[i]);
                //  console.log('for');
                  }
                })
              
           //   console.log('//////////////////////////////////////////////////////////////');
          // cb(selectedoffers);
          }
        })
      }
    })
  }

  exports.createJsonList = function(id, cb){
    let obj = [];
    let sql = "SELECT project1.selectedoffer.idOrder, group_concat(concat(project1.selectedoffer.idselectedoffer, ':', project1.offer.name, ':', project1.selectedoffer.amount, ':', project1.offer.description, ':',  project1.offer.idoffer, ':', project1.selectedoffer.instruction, ':', project1.offer.price, ':', project1.offer.idrestaurant)) as 'bs' FROM project1.selectedoffer INNER JOIN project1.offer WHERE project1.selectedoffer.idOffer=project1.offer.idoffer AND idUser=? group by project1.selectedoffer.idOrder";
    let values = [id];
    mysql.getConnection(function(err, connection){
      if (err) cb(err);
      else {
        connection.query(sql, values, function(err, rows){
          if (err) cb(err);
          else {
            connection.release();
            let array1 = new Array();
            let arrayOfArray = new Array();

            for(let i=0; i<rows.length;i++){
              let str = String(rows[i].bs);
              // console.log(str);
              let strreplace = str.replace(/, /g, '; ');
             // console.log(strreplace);
              let arrayOfOffers = strreplace.split(',');
             /* for(y=0; y<arrayOfOffers.length; y++){
                array1.add(arrayOfOffers[y])
                //console.log(arrayOfOffers[y]);
              } */
              arrayOfArray.push(arrayOfOffers);
            }
            console.log(arrayOfArray);
            //console.log(data);
            cb(arrayOfArray);
          }
        })
      }
    })
  }

  exports.getSelectedSidedishes = function(id, cb) {
    let sql = "SELECT project1.sidedish.name FROM project1.selectedsidedishes INNER JOIN project1.sidedish WHERE project1.selectedsidedishes.idsidedish=project1.sidedish.idsidedish AND project1.selectedsidedishes.idselectedoffer=?";
    let values = [id];
    mysql.getConnection(function(err, connection){
      if(err) cb(err);
      else {
        connection.query(sql, values, function(err, rows){
          if(err) cb(err);
          else{
            connection.release();
            console.log(rows);
            let names = new Array();
            if(rows.length == 0) {
              names.push('Without additional');
            }
            for(let i=0; i<rows.length; i++){
              names.push(rows[i].name);
            } 
            cb(names);
          }
        })
      }
    })
  }
